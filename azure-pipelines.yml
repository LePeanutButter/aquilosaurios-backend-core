# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  branches:
    include:
      - develop

pr:
  branches:
    include:
      - develop
      - main

pool:
  vmImage: 'windows-latest'

variables:
  dotnetVersion: '6.x'
  buildConfiguration: 'Release'
  artifactName: 'api-drop'

stages:
- stage: BuildAndTest
  displayName: Build & Test
  jobs:
  - job: CompileAndTest
    displayName: Restore, Build, Test
    steps:
    # Install the .NET SDK
    - task: UseDotNet@2
      displayName: Use .NET SDK $(dotnetVersion)
      inputs:
        packageType: sdk
        version: $(dotnetVersion)

    # Cache NuGet packages for faster restores
    - task: Cache@2
      displayName: Cache NuGet
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/*.csproj'
        path: $(NUGET_PACKAGES)

    # Restore dependencies
    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: restore
        projects: '**/*.csproj'

    # Build all projects in Release
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Run unit tests and publish results
    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx'
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Unit Tests'

- stage: PublishArtifact
  displayName: Publish Artifact
  dependsOn: BuildAndTest
  jobs:
  - job: Artifact
    displayName: Package and Publish
    steps:
    # Publish the API as a self-contained package (zipped)
    - task: DotNetCoreCLI@2
      displayName: dotnet publish
      inputs:
        command: publish
        publishWebProjects: true
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build'
        zipAfterPublish: true

    # Push the zipped package to pipeline artifacts
    - task: PublishBuildArtifacts@1
      displayName: Publish Build Artifact
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: $(artifactName)